// Generated by CoffeeScript 1.7.1
(function() {
  var Q, User, config, getDbClient, hasRequiredParameters, pg, restify, server, util;

  restify = require('restify');

  config = require('./config');

  pg = require('pg');

  Q = require('q');

  getDbClient = function() {
    var defer;
    defer = Q.defer();
    pg.connect({
      user: config.database.user,
      database: config.database.database,
      password: config.database.password,
      port: config.database.port,
      host: config.database.host,
      ssl: config.database.ssl
    }, function(err, client, done) {
      if (err) {
        console.log(err);
        return defer.reject(new Error('Could not connect to the database'));
      } else {
        return defer.resolve([client, done]);
      }
    });
    return defer.promise;
  };

  User = require('./user');

  util = require('./util');

  hasRequiredParameters = util.hasRequiredParameters;

  server = restify.createServer({
    name: 'LunchAPI'
  });

  server.use(restify.bodyParser());

  server.get('/test.html', (function(_this) {
    return function(req, res, next) {
      res.send({
        status: "OK",
        message: "Hello!"
      });
      return next();
    };
  })(this));

  server.post('/api/auth/register', (function(_this) {
    return function(req, res, next) {
      var password, username;
      if (!hasRequiredParameters(req.params, 'username', 'password')) {
        return next(new restify.MissingParameterError("username and password is required."));
      }
      username = req.params.username;
      password = req.params.password;
      getDbClient().then(function(_arg) {
        var dbClient, done;
        dbClient = _arg[0], done = _arg[1];
        return User.register(username, password, dbClient).then(function() {
          return res.send("OK");
        })["finally"](function() {
          return done();
        });
      })["catch"](function(err) {
        console.log(err);
        return next(err);
      });
    };
  })(this));

  server.get('/.*?', restify.serveStatic({
    directory: './public',
    "default": "index.html"
  }));

  server.listen(config.server.port, config.server.ip, function() {
    return console.log('%s listening at %s', server.name, server.url);
  });

}).call(this);
